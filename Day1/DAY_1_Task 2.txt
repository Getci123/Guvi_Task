DAY_1:Task
Name: S Getciya
Gmail: getciya7@gmail.com


Blog on objects and their internal representation in JavaScript:

Objects and Its Internal Representation in JavaScript
In JavaScript, objects are a collection of key-value pairs, where the keys are strings (or symbols) and the values can be any data type, including other objects. Objects are used to represent real-world entities, data structures, and more complex data types.

Internal Representation of Objects in JavaScript:

Objects are internally represented as hash tables in JavaScript. A hash table is a data structure that maps keys to values. The keys in a hash table are typically strings, but they can also be numbers or symbols. The values in a hash table can be any data type, including other objects.

When you create an object in JavaScript, the engine creates a new hash table and stores it in memory. The keys in the hash table are the names of the object's properties, and the values in the hash table are the values of the object's properties.

Accessing Object Properties:

You can access the properties of an object using the dot notation or the bracket notation. The dot notation is more common and easier to read, but the bracket notation is useful when the property name is a variable or contains special characters.

For example, the following code creates an object and assigns it to the variable myCar. The code then accesses the make property of the object using the dot notation:


Example:

const myCar = {
  make: 'Ford',
  model: 'Mustang',
  year: 2020
};
console.log(myCar.make); // 'Ford'

The following code accesses the model property of the object using the bracket notation.

const myCar = {
  make: 'Ford',
  model: 'Mustang',
  year: 2020
};


console.log(myCar['model']); // 'Mustang'


Adding and Removing Object Properties:

You can add and remove properties from an object using the dot notation or the bracket notation. To add a property to an object, you simply assign a value to the property name. To remove a property from an object, you use the delete keyword.
For example, the following code adds a new property named color to the myCar object:


const myCar = {
  make: 'Ford',
  model: 'Mustang',
  year: 2020
};


myCar.color = 'red';


console.log(myCar.color); // 'red'


The following code removes the color property from the myCar object:


const myCar = {
  make: 'Ford',
  model: 'Mustang',
  year: 2020
};


delete myCar.color;


console.log(myCar.color); // undefined


Object Methods:

Objects can also have methods. Methods are functions that are attached to objects. You can call a method on an object using the dot notation.


For example, the following code creates an object with a method named drive():


const myCar = {
  make: 'Ford',
  model: 'Mustang',
  year: 2020,


  drive() {
    console.log('The car is driving.');
  }
};


myCar.drive(); // 'The car is driving.'


Conclusion:


Objects are a powerful data type in JavaScript. They allow you to represent real-world entities, data structures, and more complex data types. Objects are internally represented as hash tables in JavaScript. You can access the properties of an object using the dot notation or the bracket notation. You can also add and remove properties from an object using the dot notation or the bracket notation. Objects can also have methods, which are functions that are attached to objects.